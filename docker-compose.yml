version: '3.7'

services: 
    mysqldb:
        image: mysql:5.7.29
        networks: 
            - watchdog-net
        volumes: 
            - ./microservices/mysql/data:/var/lib/mysql
            - ./microservices/mysql/setup:/docker-entrypoint-initdb.d
        ports: 
            - 3306:3306
        environment: 
            - MYSQL_ROOT_PASSWORD=password

    rabbitmq:
        image: rabbitmq:3-management
        healthcheck:
            test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_port_connectivity && rabbitmq-diagnostics -q node_health_check"]
            interval: 30s
            timeout: 30s
            retries: 3
        environment: 
            - RABBITMQ_DEFAULT_USER=admin
            - RABBITMQ_DEFAULT_PASS=password
            - RABBITMQ_DEFAULT_VHOST=watchdog
        networks: 
            - watchdog-net
        ports: 
            - 15672:15672
        expose: 
            - "5672"

    datahandler:
        build: ./microservices/dataHandler
        restart: 'on-failure'
        depends_on: 
            - mysqldb
        networks: 
            - watchdog-net
        environment: 
            - SQLALCHEMY_DATABASE_URI=mysql+mysqlconnector://root:password@mysqldb:3306/watchdog
            - SQLALCHEMY_TRACK_MODIFICATIONS=False
        expose: 
            - "5000"
        
    watchlist:
        build: ./microservices/watchlist
        restart: 'on-failure'
        depends_on: 
            - datahandler
        networks: 
            - watchdog-net
        env_file: 
            - ./env/.env.prod
        expose: 
            - "5001"
            

    ping:
        build: ./microservices/ping
        restart: 'on-failure'
        networks: 
            - watchdog-net
        depends_on: 
            - rabbitmq
        env_file: 
            - ./env/.env.prod

    healthcheck:
        build: ./microservices/healthcheck
        restart: 'on-failure'
        depends_on: 
            - datahandler
            - rabbitmq
        networks: 
            - watchdog-net
        env_file: 
            - ./env/.env.prod
        ports: 
            - 5002:5002

    webapp:
        image: trafex/alpine-nginx-php7
        restart: 'on-failure'
        depends_on: 
            - datahandler
            - watchlist
        volumes: 
            - ./webapp:/var/www/html
            - ./webapp/conf/watchdog.conf:/etc/nginx/conf.d/server.conf
            - ./webapp/conf/php.ini:/etc/php7/conf.d/settings.ini
        networks: 
            - watchdog-net
        ports: 
            - 80:8000

    bot-tracker:
        build: ./microservices/bot-tracker
        restart: 'on-failure'
        depends_on: 
            - datahandler
        networks: 
            - watchdog-net
        expose:
            - "8443" 
        env_file: 
            ./env/.env.prod


    phpmyadmin:
        image: phpmyadmin/phpmyadmin:latest
        networks: 
            - watchdog-net
        ports: 
            - 8080:80
        environment: 
            - PMA_HOST=mysqldb
            - MYSQL_ROOT_PASSWORD=password
            - PMA_USER=root
            - PMA_PASSWORD=password


    notification:
        build: ./microservices/notification
        networks: 
            - watchdog-net
        env_file: 
            - ./env/.env.prod
        restart: 'on-failure'
        depends_on: 
            - rabbitmq


    kong-database:
        image: postgres:9.6
        env_file: 
            - "./env/.db.env"
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
            interval: 30s
            timeout: 30s
            retries: 3
        restart: on-failure
        stdin_open: true
        tty: true
        networks:
            - watchdog-net
        volumes:
            - ./microservices/kong/pgdata:/var/lib/postgresql/data
        expose: 
            - "5432"
    

    kong-migrations:
        image: "kong"
        command: kong migrations bootstrap
        depends_on:
            - "kong-database"
        env_file: 
            - "./env/.kong.env"
        networks:
            - watchdog-net
        restart: on-failure
    

    kong:
        image: "kong"
        depends_on:
            - "kong-migrations"
            - "kong-database"
        env_file: 
            - "./env/.kong.env"
        ports:
            - "8000:8000/tcp"
            - "8443:8443/tcp"
        expose: 
            - "8001"
        healthcheck:
            test: ["CMD", "kong", "health"]
            interval: 10s
            timeout: 10s
            retries: 10
        networks: 
            - watchdog-net
        restart: on-failure
    

    konga:
        image: 'pantsel/konga'
        restart: 'on-failure'
        depends_on: 
            - "kong-database"
            - "kong"
        env_file: 
            - "./env/.konga.env"
        networks: 
            - watchdog-net
        volumes: 
            - ./microservices/kong/kongadata:/app/kongadata
        ports: 
            - "1337:1337/tcp"    


networks:
  watchdog-net:
    
    